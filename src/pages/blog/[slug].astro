---
import { getCollection, getEntryBySlug } from 'astro:content';
import BackIcon from '@/components/common/Back.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import '@/assets/styles/index.css';
import '@/assets/styles/blog/blog-post.css';
import ClickSound from '@/components/common/UISound.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;
const post = await getEntryBySlug('blog', slug);
if (!post) throw new Error('Post not found');

const { Content } = await post.render();

// Calculate reading time and word count
const content = post.body;
const words = content.split(/\s+/).length;
const readingTime = Math.ceil(words / 200); // 200 words per minute

// Extract keywords from content (simple extraction)
const extractKeywords = (text: string, title: string) => {
  const commonWords = [
    'the',
    'a',
    'an',
    'and',
    'or',
    'but',
    'in',
    'on',
    'at',
    'to',
    'for',
    'of',
    'with',
    'by',
    'is',
    'are',
    'was',
    'were',
    'be',
    'been',
    'have',
    'has',
    'had',
    'do',
    'does',
    'did',
    'will',
    'would',
    'could',
    'should',
  ];
  const titleWords = title
    .toLowerCase()
    .split(/\s+/)
    .filter((word) => word.length > 3 && !commonWords.includes(word));
  const contentWords = text.toLowerCase().match(/\b\w{4,}\b/g) || [];
  const wordFreq: Record<string, number> = {};

  // Count title words with higher weight
  titleWords.forEach((word) => {
    wordFreq[word] = (wordFreq[word] || 0) + 3;
  });

  // Count content words
  contentWords.forEach((word) => {
    if (!commonWords.includes(word)) {
      wordFreq[word] = (wordFreq[word] || 0) + 1;
    }
  });

  // Return top keywords
  return Object.entries(wordFreq)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10)
    .map(([word]) => word);
};

const keywords = extractKeywords(content, post.data.title);

// Enhanced meta data for blog posts
const meta = {
  title: `${post.data.title} | Prakash Raj Blog`,
  description: post.data.excerpt,
  image: post.data.image,
  canonicalURL: Astro.url.href,
  type: 'article' as const,
  publishedTime: new Date(post.data.date).toISOString(),
  modifiedTime: new Date(post.data.date).toISOString(), // You can add a modified date field to your content schema
  author: 'Prakash Raj',
  keywords: [...keywords, 'Prakash Raj', 'Blog', 'Technology', 'Web Development', 'Programming'],
  structuredDataType: 'BlogPosting' as const,
  wordCount: words,
  category: 'Technology', // You can add categories to your content schema
  articleBody: content.substring(0, 1000) + '...', // First 1000 chars for schema
  additionalStructuredData: {
    readingTime: `PT${readingTime}M`,
    wordCount: words,
    // Removed breadcrumb data since we're removing the visual breadcrumb
    publisher: {
      '@type': 'Organization',
      name: 'Prakash Raj',
      logo: {
        '@type': 'ImageObject',
        url: 'https://prakashraj.info/assets/images/PR.png',
      },
    },
  },
};
---

<MainLayout meta={meta}>
  <ClickSound />
  <div class="container">
    <!-- Removed Breadcrumb component -->
    <BackIcon />
    <article class="blog-post">
      <header class="post-header">
        <h1 class="post-title">{post.data.title}</h1>
        <p class="post-date">
          {
            new Date(post.data.date).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
            })
          }
        </p>
      </header>

      <div class="post-content">
        <Content />
      </div>
    </article>
  </div>
</MainLayout>
