<canvas
  id="particles-canvas"
  style="position:fixed;top:0;left:0;width:100vw;height:100vh;z-index:-1;"></canvas>

<script type="text/javascript">
  (function () {
    const canvas = document.getElementById('particles-canvas');
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    let particlesArray = [];
    let animationFrameId;

    function getThemeColors() {
      const isDarkMode = document.body.classList.contains('dark');
      return isDarkMode ? ['#ff6f00', '#ffb74d', '#ffffff'] : ['#ff6f00', '#c43e00', '#2c3e50'];
    }

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      initParticles();
    }

    class Particle {
      constructor(colors) {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.size = Math.random() * 5 + 1;
        this.speedX = Math.random() * 3 - 1.5;
        this.speedY = Math.random() * 3 - 1.5;
        this.color = colors[Math.floor(Math.random() * colors.length)];
        this.opacity = Math.random() * 0.5 + 0.1;
      }
      update() {
        this.x += this.speedX;
        this.y += this.speedY;
        if (this.x > canvas.width || this.x < 0) this.speedX = -this.speedX;
        if (this.y > canvas.height || this.y < 0) this.speedY = -this.speedY;
      }
      draw() {
        ctx.fillStyle = this.color;
        ctx.globalAlpha = this.opacity;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function initParticles() {
      if (animationFrameId) {
        cancelAnimationFrame(animationFrameId);
      }
      particlesArray = [];
      const numberOfParticles = Math.min(100, Math.floor(window.innerWidth / 20));
      const colors = getThemeColors();
      for (let i = 0; i < numberOfParticles; i++) {
        particlesArray.push(new Particle(colors));
      }
      animateParticles();
    }

    function animateParticles() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].update();
        particlesArray[i].draw();
        for (let j = i; j < particlesArray.length; j++) {
          const dx = particlesArray[i].x - particlesArray[j].x;
          const dy = particlesArray[i].y - particlesArray[j].y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          if (distance < 150) {
            ctx.beginPath();
            ctx.strokeStyle = particlesArray[i].color;
            ctx.globalAlpha = 0.1;
            ctx.lineWidth = 1;
            ctx.moveTo(particlesArray[i].x, particlesArray[i].y);
            ctx.lineTo(particlesArray[j].x, particlesArray[j].y);
            ctx.stroke();
          }
        }
      }
      animationFrameId = requestAnimationFrame(animateParticles);
    }

    // Initial setup
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    function handleThemeChange() {
      // Use a short timeout to allow the body class to update
      setTimeout(initParticles, 50);
    }

    // Re-initialize particles when the theme changes
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', handleThemeChange);
    }

    // Also handle system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      // Only re-init if we are in 'auto' mode
      if (!localStorage.getItem('theme')) {
        handleThemeChange();
      }
    });
  })();
</script>
