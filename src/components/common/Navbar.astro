---
import '@/assets/styles/navbar.css';
import { LINKS } from '@/lib/constants';

const links = [
  {
    href: LINKS.home,
    text: 'Home',
    icon: 'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6',
  },
  {
    href: '/#about',
    text: 'About',
    icon: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z',
  },
  {
    href: '/#experience',
    text: 'Experience',
    icon: 'M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z',
  },
  {
    href: '/#projects',
    text: 'Projects',
    icon: 'M3 4a1 1 0 011-1h4l2 2h10a1 1 0 011 1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4z',
  },
  {
    href: LINKS.blog,
    text: 'Blog',
    icon: 'M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z',
  },
];

// Get current page path for active link highlighting
const currentPath = Astro.url.pathname;
const currentHash = Astro.url.hash;
---

<nav class="navbar">
  <div class="logo">
    <a href="/"><span>PR</span></a>
  </div>

  <div class="nav-center">
    <ul class="nav-links" id="nav-links">
      {
        links.map((link) => {
          let isActive = false;
          if (link.href === '/blog' && currentPath.startsWith('/blog')) {
            isActive = true;
          }
          return (
            <li>
              <a href={link.href} class={isActive ? 'active' : ''} tabindex="0">
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d={link.icon} />
                </svg>
                <span class="link-text">{link.text}</span>
              </a>
            </li>
          );
        })
      }
    </ul>
  </div>

  <div class="nav-right">
    <button class="theme-toggle" id="theme-toggle" aria-label="Toggle light/dark mode">
      <svg
        id="icon-sun"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        style="display: none;"
      >
        <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"></circle>
        <path d="M12 1V3" stroke="currentColor" stroke-width="2"></path>
        <path d="M12 21V23" stroke="currentColor" stroke-width="2"></path>
        <path d="M4.22 4.22L5.64 5.64" stroke="currentColor" stroke-width="2"></path>
        <path d="M18.36 18.36L19.78 19.78" stroke="currentColor" stroke-width="2"></path>
        <path d="M1 12H3" stroke="currentColor" stroke-width="2"></path>
        <path d="M21 12H23" stroke="currentColor" stroke-width="2"></path>
        <path d="M4.22 19.78L5.64 18.36" stroke="currentColor" stroke-width="2"></path>
        <path d="M18.36 5.64L19.78 4.22" stroke="currentColor" stroke-width="2"></path>
      </svg>
      <svg
        id="icon-moon"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        style="display: none;"
      >
        <path
          d="M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z"
          stroke="currentColor"
          stroke-width="2"></path>
      </svg>
    </button>
  </div>
</nav>

<script client:load>
  const themeToggle = document.getElementById('theme-toggle');
  const iconSun = document.getElementById('icon-sun');
  const iconMoon = document.getElementById('icon-moon');

  function applyTheme(isDark) {
    document.body.classList.toggle('dark', isDark);
    if (iconSun) iconSun.style.display = isDark ? 'inline' : 'none';
    if (iconMoon) iconMoon.style.display = isDark ? 'none' : 'inline';
  }

  function updateTheme() {
    const userPref = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    applyTheme(userPref ? userPref === 'dark' : systemPrefersDark);
  }

  // Listen for system theme changes
  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  mediaQuery.addEventListener('change', () => {
    if (!localStorage.getItem('theme')) {
      updateTheme();
    }
  });

  // Set theme on initial load
  updateTheme();

  // Handle toggle click
  if (themeToggle) {
    themeToggle.addEventListener('click', () => {
      const isCurrentlyDark = document.body.classList.contains('dark');
      localStorage.setItem('theme', !isCurrentlyDark ? 'dark' : 'light');
      updateTheme();
    });
  }

  // --- Scroll Tracker for Active Navigation Links ---
  function updateActiveNavLink() {
    const navLinksA = document.querySelectorAll('.nav-links a');
    const currentPath = window.location.pathname;
    const currentHash = window.location.hash;

    navLinksA.forEach((link) => {
      const linkHref = link.getAttribute('href');
      link.classList.remove('active'); // Always remove first

      if (linkHref === currentPath + currentHash) {
        link.classList.add('active');
      } else if (linkHref === '/blog' && currentPath.startsWith('/blog')) {
        link.classList.add('active');
      } else if (linkHref === '/' && currentPath === '/' && !currentHash) {
        link.classList.add('active');
      }
    });
  }

  // Scroll-based active link detection
  function updateActiveNavOnScroll() {
    const sections = document.querySelectorAll('section[id]');
    const navLinks = document.querySelectorAll('.nav-links a');
    const scrollPosition = window.scrollY + 150; // Offset for navbar height

    let activeSection = '';

    // Find which section is currently in view
    sections.forEach((section) => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      const sectionId = section.getAttribute('id');

      if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
        activeSection = sectionId;
      }
    });

    // Update nav links based on active section
    navLinks.forEach((link) => {
      link.classList.remove('active');
      const href = link.getAttribute('href');

      // Check if link matches current section
      if (href === `/#${activeSection}` || (href === '/' && activeSection === 'home')) {
        link.classList.add('active');
      }
      // Keep blog link active when on blog pages
      else if (href === '/blog' && window.location.pathname.startsWith('/blog')) {
        link.classList.add('active');
      }
    });
  }

  // Throttle scroll events for better performance
  let scrollTimeout;
  function throttledScrollHandler() {
    if (scrollTimeout) {
      cancelAnimationFrame(scrollTimeout);
    }
    scrollTimeout = requestAnimationFrame(() => {
      updateActiveNavOnScroll();
    });
  }

  // Event listeners
  window.addEventListener('scroll', throttledScrollHandler);
  window.addEventListener('hashchange', updateActiveNavLink);
  window.addEventListener('popstate', updateActiveNavLink);
  window.addEventListener('resize', updateActiveNavOnScroll);

  document.addEventListener('DOMContentLoaded', () => {
    updateActiveNavLink();
    updateActiveNavOnScroll();
  });

  // Handle nav link clicks
  document.querySelectorAll('.nav-links a').forEach((link) => {
    link.addEventListener('click', function () {
      // Small delay to allow scroll to happen
      setTimeout(() => {
        updateActiveNavOnScroll();
      }, 100);
    });
  });
</script>
